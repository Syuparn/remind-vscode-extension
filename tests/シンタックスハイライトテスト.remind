/*
コメント関連
*/

// 1行コメント
・変数int 年齢 = 16 // 行中コメント

/*
複数行コメント
*/
/* 複数行コメントを1行で */

/*
リテラル関連
*/

// リテラル
・変数int 年齢 = 16
・変数float 身長 = 175.0
・変数string 名前 = "Taro"
・変数boolean 学生である = true
・変数Homework 宿題 = null

/*
変数関連
*/
・変数int 数値1 = 数値2
・変数int 数値1 = _数値
・変数int 数値1 = num

/*
演算子関連
*/

// 単項演算子
□結果 = -数値
□結果 = !true
□結果 = ~1

// 二項演算子
□結果 = 2 + 3
□結果 = 2 - 3
□結果 = 2 * 3
□結果 = 2 / 3
□結果 = 2 % 3
□結果 = null ?? 3
□結果 = true == true
□結果 = true != true
□結果 = true && true
□結果 = true || true
□結果 = 1 < 2
□結果 = 1 <= 2
□結果 = 1 > 2
□結果 = 1 >= 2
□結果 = 2 & 3
□結果 = 2 | 3
□結果 = 2 ^ 3
□結果 = 2 << 3
□結果 = 2 >> 3
□結果 = 2 >>> 3

/*
関数呼び出し関連
*/
□戻り値 = 一引数関数(引数1)
□戻り値 = 二引数関数(引数1, 引数2)
□戻り値 = 三引数関数(引数1, 引数2, 引数3)
// リテラル
□戻り値 = 関数1(1, "foo", 234)

// 引数に`)`や`,`が含まれる
□戻り値 = 関数1("()", ",", 1234)

// 演算子
□戻り値 = 関数1(2 + 3, -1, (3 + 4))

// インスタンス変数
□戻り値 = 関数1(インスタンス1.変数1)

// インスタンスの関数
□戻り値 = インスタンス1.関数1(引数1)

// 引数
□()で 動作する
□(引数1)で 動作する
□(引数1, 引数2)で 動作する
□(引数1, 引数2, 引数3)で 動作する

// リテラル
□(1, "foo", 234)で 動作する

// 引数に`)`や`,`が含まれる
□("()", ",", 1234)で 動作する

// インスタンスの関数
□(名前)で アカウント.名前を設定する

// 構文エラー
□(引数1)で 1 + 1

/*
宣言関連
*/

// 変数
・変数int 数値
・変数public int 数値
・変数public static int 数値
・変数int 数値 = 1
・変数public int 数値 = 1
・変数public static int 数値 = 1
// スペースを余分に空ける
・変数int  数値 = 1
・変数int 数値  = 1
・変数 int 数値  = 1
・ 変数 int 数値  = 1
// 演算子
・変数int 数値 = 2 + 3
// かっこ
・変数int 数値 = (2 + 3)
// インスタンス変数
・変数int 数値 = インスタンス1.数値

// "変数" の省略
・int 数値 = 1
・public int 数値 = 1
・public static int 数値 = 1

// 定数
・定数int 数値
・定数int 数値 = 1

// 構文エラー
・・
・数値
・定数 定数
・変数 変数

/*
代入文関連
*/

// リテラル代入
□数値 = 3

// 変数代入
□ほげ = ふが
□数値1 = 数値2

// 演算子
□数値1 = 数値2 + 数値3

// 関数呼び出し
□交通費 = 運賃を計算する(東京駅, 横浜駅)

// インスタンス変数
□名前 = アカウント1.名前

// 構文エラー
□123 = 2
□"abc" = 2

/*
式文関連
*/

// 関数呼び出し
□(人数)で 料金を支払う
□(処理系)を 起動する

/*
関数関連
*/

▽処理する()
    // ...
△

▽int 処理する()
    // ...
    □(1)を 返す
△

▽public int 運賃を計算する(string 出発駅, string 到着駅)
    // ...
    □(運賃)を 返す
△

/*
クラス関連
*/

▽class クラス1
    ・変数 string インスタンス変数1
△

▽クラス クラス1
    ・変数 string インスタンス変数1
△

▽public クラス アカウント
    ・変数 string 名前

    ▽public string 名前を取得する()
        // ...
        □(名前)を 返す
    △
△

▽private クラス 特権アカウント : アカウント
    ▽private 子アカウントを作る()
        // ...
    △
△

/*
ブロック関連
*/

// if文
◇数値 > 0 の場合
    // ...
◇他に 数値 < 0 の場合
    // ...
◇他に
    // ...
◇ここまで

// switch文
◇値 で分岐する
◇定数1
    // ...
◇既定
    // ...
◇ここまで

// for文
〇int 数値1 = 0, 数値1 < 10, 数値1++ 繰り返す
    // ...
〇ここまで

〇繰り返す
    // ...
〇ここまで

// while文
〇(数値1 < 10) の間は繰り返す
    // ...
〇ここまで

〇ここから
    // ...
〇(数値1 < 10) の間は繰り返す

// ループの制御
〇(数値1 < 10) の間は繰り返す
    □反復処理

    ◇数値2 > 0 の場合
        □脱出する
    ◇他に 数値2 < 0 の場合
        □ループ先頭へ
    ◇ここまで
    // ...
〇ここまで

// ネスト
◇数値1 > 0 の場合
    ◇数値2 > 0 の場合
        // ...
    ◇他に
        // ...
    ◇ここまで
◇他に
    // ...
◇ここまで
